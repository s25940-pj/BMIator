import kotlin.random.Random
import kotlin.math.PI

fun main() {
    first()
    second()
    third()
    fourth()
    fifth()
    sixth()
	seventh()
	eight()
	ninth()
	tenth()
    eleventh()
	twelfth()
}

/**
 * Complete the code to make the program print "Mary is 20 years old" to standard output
 */
fun first() {
    val name = "Mary"
    val age = 20
    println("${name} is ${age} years old")  
}

/**
 * Explicitly declare the correct type for each variable:
 */
fun second() {
    val a: Int = 1000
    val b: String = "log message"
	val c: Double = 3.14
	val d: Long = 100_000_000_000_000
	val e: Boolean = false
	val f: Char = '\n'
}


/**
 * You have a list of “green” numbers and a list of “red” numbers. Complete the code to print how many numbers there are in total.
 */
fun third() {
    val greenNumbers = listOf(1, 4, 23)
	val redNumbers = listOf(17, 2)
	val totalCount = greenNumbers.count() + redNumbers.count()
	
	println(totalCount)
}

/**
 * Define a map that relates integer numbers from 1 to 3 to their corresponding spelling. Use this map to spell the given number.
 */
fun fourth() {
    val number2word = mapOf(1 to "one", 2 to "two", 3 to "three")
	val n = 2
	println("$n is spelt as '${number2word[n]}'")
}

/**
 * Use the equality operator (==) to compare the dice results.
 */
fun fifth() {
    val firstResult = Random.nextInt(6)
	val secondResult = Random.nextInt(6)

	if (firstResult == secondResult) {
        println("You win")
    } else {
        println("You loose")
    }
}

/**
 * Write a function called circleArea that takes the radius of a circle in integer format as a parameter and outputs the area of that circle.
 */
fun circleArea(radius: Int): Double {
    return PI * radius * radius
}
 
fun sixth() {
    println(circleArea(2))
}

/**
 * Rewrite the circleArea function from the previous exercise as a single-expression function.
 */
 
fun circleAreaAsSingleExpression(radius: Int): Double = PI * radius * radius

fun seventh() {
    println(circleAreaAsSingleExpression(2))
}

/**
 * Write a function that takes an Int value and an action (a function with type () -> Unit) which then repeats the action the given number of times. Then use this function
to print “Hello” 5 times.
 */
fun repeatN(n: Int, action: () -> Unit) {
    for (i in 1..n) {
        action()
    }
}

fun eight() {
    repeatN(5) {
        println("Hello")
    }
}


/**
 * Define a data class Employee with two properties: one for a name, and another for a salary. Make sure that the property for salary is mutable, otherwise you won’t
get a salary boost at the end of the year! The main function demonstrates how you can use this data class.
 */
data class Employee(val name: String, var salary: Int)

fun ninth() {
    val emp = Employee("Mary", 20)
    println(emp)
    emp.salary += 10
    println(emp)
}

/**
 * Declare the additional data classes that are needed for this code to compile.
 */
data class Person(val name: Name, val address: Address, val ownsAPet: Boolean = true)
data class Name(val first: String, val last: String)
data class Address(val street: String, val city: City)
data class City(val name: String, val countryCode: String)

fun tenth() {
    val person = Person(
        Name("John", "Pork"),
        Address("123 Ham Street", City("Springfield", "US")),
        ownsAPet = false
	)
}

/**
 * You have a set of protocols supported by your server. A user requests to use a particular protocol. Complete the program to check whether the requested protocol
is supported or not (isSupported must be a Boolean value).
 */
fun eleventh() {
	val SUPPORTED = setOf("HTTP", "HTTPS", "FTP")
	val requested = "smtp"
	val isSupported = requested.uppercase() in SUPPORTED
	println("Support for $requested: $isSupported")
}

/**
You have a list of actions supported by a web service, a common prefix for all requests, and an ID of a particular resource. To request an action title over the
resource with ID: 5, you need to create the following URL: https://example.com/book-info/5/title. Use a lambda expression to create a list of URLs from the list of
actions.
*/
fun twelfth() {
    val actions = listOf("title", "year", "author")
	val prefix = "https://example.com/book-info"
	val id = 5
	val urls = actions.map { action -> "$prefix/$id/$action" }
	println(urls)
}

 


